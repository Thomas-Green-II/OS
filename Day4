--------------------------------------------------WINDOWS BOOT PROCESS------------------------------------------------------------------------------------

Why we learn about the Windows Boot Process:

- Rootkits-           a type of malware that hides itself and other applications. A rootkit typically runs in kernel mode, so it has the same privileges 
                      as the operating system and can sometimes start before it. Because traditionally, anti-malware software doesn’t load until after 
                      the kernel and boot drivers do, rootkits often exploit weaknesses in the startup process:
- Firmware Rootkits-  overwrite the PC’s BIOS or other hardware firmware so the rootkit can start before the OS even loads
- Bootkits-           replace the OS bootloader to load the bootkit before the OS
- Kernel rootkits-    replace a portion of the OS kernel so the rootkit can start when the OS loads
- Driver rootkits-    pretend to be a boot driver that the OS uses to communicate with PC
- Avenues of Attack-  An exposed operating system can be easily used to further Offensive goals such as pivots or compromised to steal data


BIOS Master Boot Record (BIOS MBR)          VS.           UEFI GUID Partition Table (UEFI GPT)
     (first 512 bytes)   

BIOS and UEFI are the same thing with minor differences
  - firmware that ensures critical hardware like Hard Drives, Display Adapters, and SDRAM(Synchronous dynamic random-access memory) work properly
  - UEFI Boots much faster than BIOS systems
  - UEFI Firmware is usually loaded into flash memory or EEPROM, making it easier to update and patch
  - UEFI offers SECURED BOOT mode which only allows verified drivers to load
  - UEFI offers drive support of up to 9 zettabytes, while BIOS only works with 2 terabytes

The MBR contains Disk Partitions
  - contains code that starts the first stage of loading an Operating System, called a Boot Loader
  
  
 To check if the system is BIOS or UEFI 
  - bcdedit | findstr /i winload                                OR                                Look at msinfo in the search bar
  > winload.exe = BIOS, winload.efi = UEFI                                        Legacy means the system is UEFI compatible but running in BIOS mode
  
  
After the bootloader executes, is when the OS starts to load
  
  
Windows Boot Order: 
  Starts at POST
  
  BIOS ----> MBR ----> Volume Boot Sector ------> Bootloader NTLDR.exe (kernel 5) ----> Boot.ini ----> NTOSKRNL
                                           \
                                            ----> Bootloader Bootmgr.exe (kernel 6+) ----> BCD ----> OS loader Winload.exe/Winresume.exe ----> NTOSKRNL
                                              
  UEFI ----> GUID Partition Table -----> Boot Manager (Bootmgrfw.efi, kernel 6+) -------> BCD ----> OS loader Winload.efi/Winresume.efi ----> NTOSKRNL
  
System Idle Process shows you how much you have left remaining
  
svchost <---- service that runs all services

SAS = Ctrl+Alt+Del


--------------------------------------------------------------WINDOWS LOGON PROCESS---------------------------------------------------------------------

Look at public slideshow for logon process (slide 10/11)

Session 0
Ran for security and high privilege processes such as services
Processes in User Subsystem Session 0 are created using the highest permissions available to a User in Windows
- smss.exe = installs the Win32 subsystem kernel and user mode components (win32k.sys - kernel; winsrv.dll - user; and csrss.exe - user.)
- crsrss.exe =  the Client/Server Runtime Subsystem supports process/thread creation and management.
- wininit.exe = marks itself as critical, initializes the Windows temp directory, loads the rest of the registry, and starts user mode scheduling.
  It also installs programs that require a reboot to finish the install process. It also starts:
     - lsm.exe = the Local Session Manager (LSM) handles all sessions of a system (both remote desktop sessions and local system sessions.)
     - lsass.exe = the Local Security Authority Subsystem (LSASS) provides user authentication services, manages the local security policy,
        and generates access tokens.
     - services.exe the Services Control Manager (SCM) loads AutoStart services, using LSASS to authenticate if they run as something other than System.
- wininit.exe then waits for system shutdown to undo everything it started.

Session 1
Session 1 is for the first interactive user (note: each session gets its own copy of csrss.exe.) Session 1 and up are standard user sessions
Hundreds of Processes in User Subsystem Session 1 and up are started automatically as a standard user to include administrative accounts
-Spawn a Session 1 ( or higher) csrss.exe
-Spawn Winlogon.exe which by default prompts for credentials with logonui.exe
-Spawn userinit.exe which creates an account token and creates a custom environment
-Spawn explorer.exe as the customized graphical environment.  
  
  
------------------------------------------------------BCDEDIT-------------------------------------------------------------------------------------------
To check if the system is BIOS or UEFI 
  - bcdedit | findstr /i winload
  > winload.exe = BIOS, winload.efi = UEFI
  
  Check if hibernation occured
  - bcdedit | findstr /i winresume
  >                                     <---- if nothing results, then there was no hibernation

bcdedit will show you the windows boot manager and the windows boot loader

bcdedit /set description "Windows 930"   <------ change the description of the bcdedit

bcdedit /set safeboot minimal <------- makes every boot start with safe mode

bcdedit /set safeboot Network <------- sets safemode to network?

bcdedit /set safebootalternateshell yes  <------ safeboot alternate shell allows you to add more shells than powershell and the commandprompt

bcdedit /deletevalue safemode    <----- delete the value safeboot
bcdedit /deletevalue safebootalternateshell   <----- delete the value

msconfig, boot, uncheck Safe Boot, apply   <----- turns off safeboot

msconfig, services, hide micosoft services, uncheck services you dont want running, apply       <------ keep the box running normally

